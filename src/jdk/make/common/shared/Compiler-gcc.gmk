#
# Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

#
# GCC Compiler settings
#

ifeq ($(PLATFORM), windows)

  # Settings specific to Windows, pretty stale, hasn't been used
  CC           = $(COMPILER_PATH)gcc
  CPP          = $(COMPILER_PATH)gcc -E
  CXX          = $(COMPILER_PATH)g++
  CCC          = $(COMPILER_PATH)g++
  LIBEXE       = $(COMPILER_PATH)lib
  LINK         = $(COMPILER_PATH)link
  RC           = $(COMPILER_PATH)rc
  LINK32       = $(LINK)
  RSC          = $(RC)
  # unset any GNU Make settings of MFLAGS and MAKEFLAGS which may mess up nmake
  NMAKE          = MFLAGS= MAKEFLAGS= $(COMPILER_PATH)nmake -nologo
  ifeq ($(ARCH_DATA_MODEL), 32)
    CC_VER  = UNKNOWN
  else
    CC_VER  = UNKNOWN
  endif
  _LINK_VER :=$(shell $(LINK) 2>&1 | $(HEAD) -n 1)
  LINK_VER  :=$(call GetVersion,"$(_LINK_VER)")

endif

ifeq ($(PLATFORM), linux)

  ifndef BUILD_GCC
    BUILD_GCC=$(COMPILER_PATH)gcc
  endif

  ifndef BUILD_CPP
    BUILD_CPP=$(COMPILER_PATH)g++
  endif

  # Settings specific to Linux
  CC             = $(BUILD_GCC)
  CPP            = $(BUILD_GCC) -E
  # statically link libstdc++ before C++ ABI is stablized on Linux
  ifneq ($(STATIC_CXX),false)
    STATIC_CXX     = true
  endif
  ifeq ($(STATIC_CXX),true)
    # g++ always dynamically links libstdc++, even we use "-Wl,-Bstatic -lstdc++"
    # We need to use gcc to statically link the C++ runtime. gcc and g++ use
    # the same subprocess to compile C++ files, so it is OK to build using gcc.
    CXX            = $(BUILD_GCC)
  else
    CXX            = $(BUILD_CPP)
  endif
  ifeq ($(ARCH), alpha)
    # alpha
    REQUIRED_CC_VER = 3.2
    REQUIRED_GCC_VER = 3.2.*
  endif
  ifeq ($(ARCH), amd64)
    # amd64
    REQUIRED_CC_VER = 3.2
    REQUIRED_GCC_VER = 3.2.*
  endif
  ifeq ($(ARCH), arm)
    # arm
    REQUIRED_CC_VER = 3.2
    REQUIRED_GCC_VER = 3.2.*
  endif
  ifeq ($(ARCH), i586)
    # i586
    REQUIRED_CC_VER = 3.2
    REQUIRED_GCC_VER = 3.2.1*
    REQUIRED_GCC_VER_INT = 3.2.1-7a
  endif
  ifeq ($(ARCH), ia64)
    # ia64
    REQUIRED_CC_VER = 3.2
    REQUIRED_GCC_VER = 2.9[56789].*
  endif
  ifneq ("$(findstring m68k,$(ARCH))", "")
    # m68k
    REQUIRED_CC_VER = 3.2
    REQUIRED_GCC_VER = 3.2.*
  endif
  ifneq ("$(findstring mips,$(ARCH))", "")
    # mips
    REQUIRED_CC_VER = 3.2
    REQUIRED_GCC_VER = 3.2.*
  endif
  ifneq ("$(findstring parisc,$(ARCH))", "")
    # mips
    REQUIRED_CC_VER = 4.4
    REQUIRED_GCC_VER = 4.4.*
  endif
  ifneq ("$(findstring ppc,$(ARCH))", "")
    # ppc or ppc64
    REQUIRED_CC_VER = 3.2
    REQUIRED_GCC_VER = 3.2.*
  endif
  ifneq ("$(findstring s390,$(ARCH))", "")
    # s390 or s390x
    REQUIRED_CC_VER = 3.2
    REQUIRED_GCC_VER = 3.2.*
  endif
  ifneq ("$(findstring sh,$(ARCH))", "")
    # sh4*, sh3*
    REQUIRED_CC_VER = 4.0
    REQUIRED_GCC_VER = 4.0.*
  endif
  # Option used to create a shared library
  SHARED_LIBRARY_FLAG = -shared
  SUN_COMP_VER := $(shell $(CC) --verbose 2>&1 )

endif

ifeq ($(PLATFORM), solaris)

  # Settings specific to Solaris
  CC             = $(COMPILER_PATH)gcc
  CPP            = $(COMPILER_PATH)gcc -E
  CXX            = $(COMPILER_PATH)g++

  # Option used to create a shared library
  SHARED_LIBRARY_FLAG = -G
  
endif

# Get gcc version
_CC_VER :=$(shell $(CC) -dumpversion 2>&1 )
CC_VER  :=$(call GetVersion,"$(_CC_VER)")
CC_MAJORVER  :=$(call MajorVersion,$(CC_VER))
CC_MINORVER  :=$(call MinorVersion,$(CC_VER))

# Name of compiler
COMPILER_NAME = GCC$(call MajorVersion,$(CC_VER))
COMPILER_VERSION = $(COMPILER_NAME)

